name: Pull Request Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  validate-pr:
    name: Validate Pull Request
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: 17
        distribution: 'temurin'
        cache: maven
    
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Validate PR title length
      run: |
        if [ ${#PR_TITLE} -lt 5 ]; then
          echo "❌ PR title is too short"
          exit 1
        fi
        echo "✅ PR title validation passed"
      env:
        PR_TITLE: ${{ github.event.pull_request.title }}
      
    - name: Validate PR title
      run: |
        echo "Validating PR title: ${{ github.event.pull_request.title }}"
        # Basic validation - ensure title is not empty and has reasonable length
        if [ ${#{{ github.event.pull_request.title }}} -lt 5 ]; then
          echo "❌ PR title is too short"
          exit 1
        fi
        echo "✅ PR title validation passed"
    
    - name: Check for large files
      run: |
        echo "Checking for large files..."
        # Check for files larger than 10MB
        large_files=$(find . -type f -size +10M -not -path "./.git/*" -not -path "./target/*" -not -path "./.github/*" | wc -l)
        if [ "$large_files" -gt 0 ]; then
          echo "⚠️  Found $large_files large files (>10MB):"
          find . -type f -size +10M -not -path "./.git/*" -not -path "./target/*" -not -path "./.github/*"
          echo "Consider using Git LFS for large files"
        else
          echo "✅ No large files found"
        fi
    
    - name: Validate Java code style
      run: |
        echo "Validating Java code style..."
        # Basic validation - check for common issues
        java_files=$(find . -name "*.java" -not -path "./target/*" | wc -l)
        echo "Found $java_files Java files"
        
        # Check for TODO comments in new code
        if git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | grep -q "\.java$"; then
          echo "Checking for TODO comments in changed Java files..."
          git diff ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} --name-only | grep "\.java$" | xargs grep -l "TODO\|FIXME" || echo "No TODO/FIXME comments found in changed files"
        fi
    
    - name: Build and test
      run: |
        echo "Building and testing changes..."
        mvn clean compile -DskipTests
        
        # Run tests if any test files were changed
        if git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | grep -q "Test\.java$"; then
          echo "Running tests..."
          mvn test
        else
          echo "No test files changed, skipping tests"
        fi
    
    - name: Check documentation
      run: |
        echo "Checking documentation..."
        # Ensure README exists and is not empty
        if [ ! -f "README.md" ] || [ ! -s "README.md" ]; then
          echo "❌ README.md is missing or empty"
          exit 1
        fi
        
        # Check if new modules need documentation
        new_modules=$(git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | grep -o "^[^/]*" | sort -u | grep -v "\.github\|\.git\|target\|docs\|scripts\|input\|output\|logs")
        if [ -n "$new_modules" ]; then
          echo "New modules detected: $new_modules"
          echo "Please ensure new modules are documented in README.md"
        fi
    
    - name: Comment PR
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('## PR Validation Results')
          );
          
          const status = '${{ job.status }}' === 'success' ? '✅' : '❌';
          const body = `## PR Validation Results ${status}
          
          **Validation Status**: ${{ job.status }}
          
          **Checks Performed**:
          - ✅ PR title validation
          - ✅ Large file check
          - ✅ Java code style validation
          - ✅ Build and compilation
          - ✅ Documentation check
          
          **Summary**: ${{ job.status == 'success' && 'All validations passed!' || 'Some validations failed. Please check the logs.' }}
          
          ---
          *This comment was automatically generated by the PR validation workflow.*`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }
